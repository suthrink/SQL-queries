Table 1:
CREATE TABLE Students (
    student_id INT Primary key,
    student_name VARCHAR(255)
);

student_id is the primary key for this table.
Each row of this table contains the ID and the name of one student in the school.

Table 2 :
CREATE TABLE Subjects (
    subject_name VARCHAR(255) PRIMARY KEY
);

subject_name is the primary key for this table.
Each row of this table contains the name of one subject in the school.

Table 3:
CREATE TABLE Examinations (
    student_id INT,
    subject_name VARCHAR(255),
    Foreign Key(student_id) References Students(student_id)
);


There is no primary key for this table. It may contain duplicates.
Each student from the Students table takes every course from the Subjects table.
Each row of this table indicates that a student with ID student_id attended the exam of subject_name.

Write an SQL query to find the number of times each student attended each exam. Return the result table ordered by student_id and subject_name.
The query result format is in the following example.

Input 1
INSERT INTO Students (student_id, student_name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(13, 'John'),
(6, 'Alex');

Input 2:
INSERT INTO Subjects (subject_name) VALUES
('Math'),
('Physics'),
('Programming');

Input 3 :
INSERT INTO Examinations (student_id, subject_name) VALUES
(1, 'Math'),
(1, 'Physics'),
(1, 'Programming'),
(2, 'Programming'),
(1, 'Physics'),
(1, 'Math'),
(13, 'Math'),
(13, 'Programming'),
(13, 'Physics'),
(2, 'Math'),
(1, 'Math');

Query :
select Students.student_id, Students.student_name, Subjects.subject_name, count(Examinations.subject_name) as attended_exams
from Subjects 
join Students 
left join Examinations 
on Students.student_id = Examinations.student_id and Subjects.subject_name = Examinations.subject_name
group by Students.student_id, Subjects.subject_name
ORDER BY Students.student_id, Subjects.subject_name;


Output:

| student_id | student_name | subject_name | attended_exams |
|------------|--------------|--------------|----------------|
| 1          | Alice        | Math         | 3              |
| 1          | Alice        | Physics      | 2              |
| 1          | Alice        | Programming  | 1              |
| 2          | Bob          | Math         | 1              |
| 2          | Bob          | Physics      | 0              |
| 2          | Bob          | Programming  | 1              |
| 6          | Alex         | Math         | 0              |
| 6          | Alex         | Physics      | 0              |
| 6          | Alex         | Programming  | 0              |
| 13         | John         | Math         | 1              |
| 13         | John         | Physics      | 1              |
| 13         | John         | Programming  | 1              |

